const userNameData = ["Max", "schwarzmuller"];

const firstName = userNameData[0];
const lastName = userNameData[1];


const [firstName, lastName] = ["Max", "schwarzmuller"];

- 위의 두 코드는 서로 같음
- 배열 분해

const user = {
  name: "Max",
  age: 34,
};

const {name, age} = {
  name: "Max",
  age: 34,
};

const {name : userName , age} = {
  name: "Max",
  age: 34,
};

console.log(userName);
console.log(age);

- 위의 두 코드는 서로 같음
- 객체 분해시 좌측 변수 이름은 원하는대로 지을 수 없음, 필드에 정의된 이름만 사용해야함
- :(클론)을 사용해 별칭 부여 가능 
- 객체 분해


함수 매개변수 목록에서 디스트럭처링

이전 강의에서 설명한 디스트럭처링 구문은 함수 매개변수 목록에서도 사용할 수 있습니다.

예를 들어, 함수가 객체를 포함하는 매개변수를 수락하는 경우, 객체 프로퍼티를 “꺼내어’” 로컬 범위 변수(즉, 함수 본문 내에서만 사용할 수 있는 변수)로 사용할 수 있도록 함수를 디스트럭처링할 수 있습니다.

다음은 예시입니다:

function storeOrder(order) {
  localStorage.setItem('id', order.id);
  localStorage.setItem('currency', order.currency);
}
storeOrder 함수 본문 내부의 "점 표기법"을 통해 order 프로퍼티에 접근하지 않고, 다음과 같이 디스트럭처링을 사용할 수 있습니다:

function storeOrder({id, currency}) { // 디스트럭처링
  localStorage.setItem('id', id);
  localStorage.setItem('currency', currency);
}
디스트럭처링 구문은 이전 강의에서 배운 것과 같습니다. 상수나 변수를 수동으로 생성하지 않을 뿐입니다.

대신, 들어오는 객체(즉, storeOrder 에 인수로 전달된 객체)에서 id와 currency 를 "꺼내어" 사용합니다.

이 예제에서 storeOrder 는 여전히 하나의 매개변수만 받는다는 점이 매우 중요합니다! 매개변수는 두 개가 아니라, 하나의 매개변수, 즉 내부적으로 디스트럭처링된 객체만 받습니다.

함수는 여전히 다음과 같이 호출됩니다

storeOrder({id: 5, currency: 'USD', amount: 15.99}); // 1개의 매개변수 / 값!